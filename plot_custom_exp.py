import argparse
import os

import matplotlib.pyplot as plt
import numpy as np
from mpl_toolkits.axes_grid1.inset_locator import zoomed_inset_axes
from mpl_toolkits.axes_grid1.inset_locator import mark_inset


def bool_converter(value):
    if value == "False" or value == "false" or value == "FALSE":
        return False
    elif value == "True" or value == "TRUE" or value == "true":
        return True
    else :
        print("Invalid Valu")
        return None


parser = argparse.ArgumentParser()

parser.add_argument("--dir", default="new-exps", help="Directory name for loss histories generated by custom experiments", type=str)
parser.add_argument("--legends", default ="top rand qsgd tope", help="Legends for the plot you want to display", type=str)
parser.add_argument("--plot_collisions", default="False", type=str)
parser.add_argument("--title", default="Loss vs. Time", type=str)
parser.add_argument("--ylabel", default="Loss", type=str)

args = parser.parse_args()

directory = args.dir
ylab = args.ylabel
plot_title = args.title
plot_collisions = bool_converter(args.plot_collisions)
legends = args.legends.split(" ")

colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']
linestyles = ["solid", "dotted", "dashed", "dashdot"]
markers = ["^", "v", "o", "8"]
plt.rcParams['text.usetex'] = True

if __name__ == "__main__":
    tree = os.walk(directory)
    next(tree)
    fig, ax = plt.subplots()
    ax.grid(which="major", linewidth=0.4)
    #ax.set_title(plot_title, fontsize=10)
    axins = zoomed_inset_axes(ax, 2.25, loc=9)
    axins.tick_params(which='both', length=0)
    axins.set_yticklabels([])
    axins.set_xticklabels([])
    axins.grid(which="major", linewidth=0.4)

    for k, (root, _, files) in enumerate(sorted(tree)):
        if plot_collisions:
            if root.find("Coll") == -1:
                continue
        else:
            if root.find("Coll") != -1:
                continue

        iterations = int(len(files)) # Collision + Loss plots
        # take the length information
        length = len(np.load(root + '/' + files[0]))
        losses = np.zeros((iterations, length))

        for i, file in enumerate(files):
            losses[i, :] = np.load(root + '/' + file)

        #std_dev = np.std(losses, axis=0)
        mean_loss = np.mean(losses, axis=0)
        # lower and upper bound for %95 Confidence Interval
        lower, upper = np.max(losses, axis=0), np.min(losses, axis=0)

        ax.set_xlabel("Iterations")
        ax.set_ylabel(ylab)
        color_idx = k//2 if k % 2 == 0 else (k-1)//2
        ax.plot(np.arange(length), mean_loss, color=colors[color_idx], linestyle=linestyles[color_idx % 4], lw=2, label=legends[color_idx], marker=markers[color_idx % 4], markevery=5*color_idx + 100)
        axins.plot(np.arange(length), mean_loss, color=colors[color_idx], linestyle=linestyles[color_idx % 4], lw=2,
                   marker=markers[color_idx % 4], markevery=(5 * color_idx + 100))

        #ax.fill_between(np.arange(length), lower, upper, color=colors[color_idx], alpha=0.35)
        #ax.fill_between(np.arange(length), lower, upper, color=colors[color_idx], alpha=0.2)
        #axins.fill_between(np.arange(length), lower, upper, color=colors[color_idx], alpha=0.2)

    axins.set_xlim(350, 450)
    axins.set_ylim(25000, 40000)
    mark_inset(ax, axins, loc1=2, loc2=4, fc="none", ec="0.5")
    ax.legend(loc=1)
    #plt.legend([r'$\lambda=0$', r'$\lambda=1$', r'$\lambda=2$', r'$\lambda=5$', r'$\lambda=7$', r'$\lambda=10$'])
    plt.draw()
    fig.savefig(directory + "/Figure.png", dpi=1000, bbox_inches="tight")
